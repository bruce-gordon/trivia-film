[{"/Users/wolf/turing/projects/3_mod/trivia-film/src/index.js":"1","/Users/wolf/turing/projects/3_mod/trivia-film/src/reportWebVitals.js":"2","/Users/wolf/turing/projects/3_mod/trivia-film/src/App/App.js":"3","/Users/wolf/turing/projects/3_mod/trivia-film/src/apiCalls.js":"4","/Users/wolf/turing/projects/3_mod/trivia-film/src/Display/Display.js":"5","/Users/wolf/turing/projects/3_mod/trivia-film/src/Question/Question.js":"6"},{"size":507,"mtime":1608664672380,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1608663798139,"results":"9","hashOfConfig":"8"},{"size":1896,"mtime":1609456295184,"results":"10","hashOfConfig":"8"},{"size":162,"mtime":1608664961153,"results":"11","hashOfConfig":"8"},{"size":1321,"mtime":1609457192975,"results":"12","hashOfConfig":"8"},{"size":3420,"mtime":1609456051791,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lgw26i",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"/Users/wolf/turing/projects/3_mod/trivia-film/src/index.js",[],"/Users/wolf/turing/projects/3_mod/trivia-film/src/reportWebVitals.js",[],"/Users/wolf/turing/projects/3_mod/trivia-film/src/App/App.js",[],"/Users/wolf/turing/projects/3_mod/trivia-film/src/apiCalls.js",[],"/Users/wolf/turing/projects/3_mod/trivia-film/src/Display/Display.js",["28"],"/Users/wolf/turing/projects/3_mod/trivia-film/src/Question/Question.js",["29"],"import React, { Component } from 'react';\nimport './Question.css';\nimport he from 'he';\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      correct: '',\n      selected: ''\n    }\n  }\n\n  componentDidMount = () => {\n    this.setState({ correct: this.props.correct, selected: '' })\n  }\n\n  sortChoices = () => {\n    let wrong = this.props.incorrect;\n    let right = [this.props.correct];\n    let allAnswers = wrong.concat(right)\n    return allAnswers.sort();\n  }\n\n  decodeChoices = () => {\n    const decodedChoices = this.sortChoices().map(answer => he.decode(answer));\n    return decodedChoices;\n  }\n\n  handleClick = (event) => {\n    const answer = event.target.closest('div').children[0].innerText;\n    this.setState({ selected: answer });\n    this.props.updateAnswers(this.props.id, this.checkAnswer(answer))\n  }\n\n  checkAnswer= (answer) => {\n    return (answer === this.state.correct) ? true : false;\n  }\n\n  checkSubmitted = (index, letter) => {\n    if (this.state.correct === this.decodeChoices()[index]) {\n      return (\n        <div className='correct' onClick={ this.handleClick }>{`${letter}) `}\n        <p style={{display: 'inline'}}>\n        { `${this.decodeChoices()[index]}` }\n        </p>\n        </div> )\n      } else {\n        return (\n          <div className='choice' onClick={ this.handleClick }>{`${letter}) `}\n          <p style={{display: 'inline'}}>\n          { `${this.decodeChoices()[index]}` }\n          </p>\n          </div>)\n        }\n      }\n\n  checkSelected = (index, letter) => {\n    const correct = this.state.correct;\n    const gameOver = this.props.gameOver;\n    if (this.state.selected === this.decodeChoices()[index] && gameOver === false) {\n      return (\n        <div className='selected' onClick={ this.handleClick }>{`${letter}) `}\n          <p style={{display: 'inline'}}>\n            { `${this.decodeChoices()[index]}` }\n          </p>\n        </div>\n      )\n    } else if (this.state.selected === this.decodeChoices()[index] && gameOver === true) {\n      return (\n        <div className={ `selected ${ correct === this.decodeChoices()[index] ? 'correct' : 'incorrect'}` } onClick={ this.handleClick }>{`${letter}) `}\n          <p style={{display: 'inline'}}>\n            { `${this.decodeChoices()[index]}` }\n          </p>\n        </div>\n      )\n    } else if (this.state.selected !== this.decodeChoices()[index] && gameOver === true) {\n      return (\n        <div className={`choice ${ correct === this.decodeChoices()[index] ? 'correct' : ''}` } onClick={ this.handleClick }>{`${letter}) `}\n          <p style={{display: 'inline'}}>\n            { `${this.decodeChoices()[index]}` }\n          </p>\n        </div>\n      )\n    } else {\n      return (\n        <div className='choice' onClick={ this.handleClick }>{`${letter}) `}\n          <p style={{display: 'inline'}}>\n            { `${this.decodeChoices()[index]}` }\n          </p>\n        </div>\n      )\n    }\n  }\n\n\n  render() {\n    const { q, id, gameOver } = this.props;\n    return (\n      <article className='question-and-answers'>\n        <h4 className='question'>{ `${ id+1 }. ${ he.decode(q) }` }</h4>\n        <div className='mult-choices'>\n          { this.checkSelected(0, 'a') }\n          { this.checkSelected(1, 'b') }\n          { this.checkSelected(2, 'c') }\n          { this.checkSelected(3, 'd') }\n        </div>\n      </article>\n    )\n  }\n}\n\nexport default Question\n",["30","31"],{"ruleId":"32","severity":1,"message":"33","line":7,"column":11,"nodeType":"34","messageId":"35","endLine":7,"endColumn":20},{"ruleId":"32","severity":1,"message":"36","line":98,"column":20,"nodeType":"34","messageId":"35","endLine":98,"endColumn":28},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},"no-unused-vars","'randomNum' is assigned a value but never used.","Identifier","unusedVar","'gameOver' is assigned a value but never used.","no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-global-assign","no-unsafe-negation"]